#include <stdio.h>
#include <stdlib.h>
/*功能：
1、实现AVL树的构建(就是不停的插入)
2、插入操作
3、删除操作
4、查找操作
5、排序操作
*/
/*定义树的结构*/
typedef int dataType;
struct ALVNode{
    dataType data;//结点的数字
    struct ALVNode *left,*right;//左右结点
    int balance;//

};
typedef struct  ALVNode *tree;
typedef enum{true=1,false=0}PointTag;
int success=false;
void preOrderTraversal(tree BT);
void reafromfile(tree T,int *m);
void AVLInsert(tree T,dataType R);
void LeftBalance(tree T);
void RightBalance(tree T);
void RotateLeft(tree T);
void RotateRight(tree T);
int main()
{
    tree T=NULL;
    int m;
    reafromfile(T,&m);
    //printf("%data:d\n",T->data);
    preOrderTraversal(T);
    return 0;
}

//先序遍历
void preOrderTraversal(tree BT){
    if(BT){
        printf("%c",BT->data);
        preOrderTraversal(BT->left);
        preOrderTraversal(BT->right);
    }
}

/*从文件中读进信息*/
void reafromfile(tree T,int *m){
    FILE*fp;
    int i,data_;
    if((fp=fopen("E://数据结构//AVL//data.txt","r"))==NULL)
    {
        printf("fail to open!");
        exit(0);
    }
    fscanf(fp,"%d\n",m);
    printf("%d\n",*m);
    for(i=1;i<=*m;i++)
    {
        fscanf(fp,"%d",&data_);
         printf("%d\n",data_);
        AVLInsert(T,data_);
    }
}

/*插入结点*/
void AVLInsert(tree T,dataType R){
    if(T==NULL){
        T=(tree)malloc(sizeof(struct ALVNode));
        T->left=T->right=NULL;//左右指针都赋值为NULL
        T->balance=0;//创建的平衡为0
        T->data=R;
        success=true;
    }else if(R<T->data){//插入树的左子树上
        AVLInsert(T->left,R);//传入左儿子
        //用这个位置来判断是不是申请成功
        if(success){
            //根据结点的信息判断情况
            switch(T->balance){
            case -1:
                T->balance=0;
                break;
            case 0:
                 T->balance=1;
                 break;
            case 1:
                //左平衡
                LeftBalance(T);
                break;
            }
        }
    }else{//插入树的右子树上
        AVLInsert(T->right,R);//传入左儿子
        //用这个位置来判断是不是申请成功
        if(success){
            //根据结点的信息判断情况
            switch(T->balance){
            case -1:
                RightBalance(T);
                break;
            case 0:
                 T->balance=-1;
                 break;
            case 1:
                 T->balance=-0;
                 break;
            }
        }
    }

}

/*左平衡旋转
作用：先左后右+左*/
void LeftBalance(tree T){
    tree leftsub,rightsub;
    leftsub=T->left;
    switch(leftsub->balance){
        case -1:
            //需要进行两次调整
            rightsub=leftsub->right;
            switch(rightsub->balance){
                case -1:
                    T->balance=0;
                    leftsub->balance=1;
                    break;
                case 1:
                    T->balance=-1;
                    leftsub->balance=0;
                    break;
                case 0:
                    T->balance=leftsub->balance=0;
                    break;
            }
            rightsub->balance=0;
            RotateLeft(leftsub);//左儿子左转
            RotateRight(T);//头结点右转
            break;
        case 0:
            printf("平衡\n");
            break;
        case 1:
            //一条左边直线情况
            T->balance=leftsub->balance=0;
            //!!!
            //leftsub->left->balance=0;
            RotateRight(T);
            break;
    }
}

/*右平衡旋转
作用：*/
void RightBalance(tree T){
    tree leftsub,rightsub;
    rightsub=T->right;
    switch(rightsub->balance){
        case -1:
            //左旋转
            T->balance=rightsub->balance=0;
            //!!!为什么！！
            //rightsub->right->balance=0;
            RotateLeft(T);
            break;
        case 0:
            printf("平衡\n");
            break;
        case 1:
            leftsub=rightsub->left;
            switch(leftsub->balance){
                case -1:
                    //!!!猜的！！！！
                    T->balance=1;
                    rightsub->balance=0;
                    break;
                case 1:
                    T->balance=0;
                    rightsub->balance=-1;
                    break;
                case 0:
                    T->balance=rightsub->balance=0;
                    break;
            }
            break;
            leftsub->balance=0;
            RotateRight(rightsub);
            RotateLeft(T);
    }
}

/*左单旋转
作用：只进行一次的向左旋转
传入参数：不平衡的结点*/
void RotateLeft(tree T){
    tree treenode=T->right;
    T->right=treenode->left;
    treenode->left=T;
}

/*右单旋转
作用：只进行一次的向左旋转
*/
void RotateRight(tree T){
    tree treenode=T->left;
    T->left=treenode->right;
    treenode->right=T;
}
